// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Client = require("@apollo/client");

var ensureError = (function (unknown) {
    if (unknown instanceof Error) {
      return unknown;
    } else {
      unknown = unknown || {};
      const message = unknown.message;
      const errorMessage = unknown.errorMessage;
      const keys = Object.keys(unknown);
      const error = new Error(message || errorMessage || "[Non-error exception with keys: " + keys.join(", ") + "]");

      keys.forEach(function(key) {
        error[key] = unknown[key];
      });

      return error;
    }
  });

function error(v) {
  return v;
}

function serverError(v) {
  return v;
}

function serverParseError(v) {
  return v;
}

function classify(v) {
  if ((function (v) { return "bodyText" in v && "response" in v && "statusCode" in v})(v)) {
    return {
            TAG: /* ServerError */1,
            _0: v
          };
  } else if ((function (v) { return "result" in v && "response" in v && "statusCode" in v})(v)) {
    return {
            TAG: /* ServerParseError */2,
            _0: v
          };
  } else {
    return {
            TAG: /* Error */0,
            _0: v
          };
  }
}

var NetworkErrorUnion = {
  error: error,
  serverError: serverError,
  serverParseError: serverParseError,
  classify: classify
};

function ensureApolloError(error) {
  return (function (error, makeApolloError, ensureError) {
            var error = error || {};
            if (Array.isArray(error.graphQLErrors)) {
              return error;
            } else if (error && typeof error.message === "string" && error.extensions) {
              return makeApolloError({graphQLErrors: [error]});
            } else {
              return makeApolloError({networkError: ensureError(error)}) 
            }
          })(error, (function (prim) {
                return new Client.ApolloError(prim);
              }), ensureError);
}

var Js_ = {
  NetworkErrorUnion: NetworkErrorUnion,
  ensureApolloError: ensureApolloError
};

function fromJs(untrustedJs) {
  var js = ensureApolloError(untrustedJs);
  return {
          extraInfo: js.extraInfo,
          graphQLErrors: Belt_Option.getWithDefault(js.graphQLErrors, []),
          networkError: Belt_Option.map(Caml_option.nullable_to_opt(js.networkError), (function (networkError) {
                  var error = classify(networkError);
                  switch (error.TAG | 0) {
                    case /* Error */0 :
                        return {
                                TAG: /* FetchFailure */0,
                                _0: error._0
                              };
                    case /* ServerError */1 :
                        var error$1 = error._0;
                        return {
                                TAG: /* BadStatus */1,
                                _0: error$1.statusCode,
                                _1: error$1
                              };
                    case /* ServerParseError */2 :
                        return {
                                TAG: /* BadBody */2,
                                _0: error._0
                              };
                    
                  }
                })),
          name: js.name,
          message: js.message,
          stack: js.stack
        };
}

function make(graphQLErrors, networkError, errorMessage, extraInfo, param) {
  var errorWithoutNetworkError = fromJs(new Client.ApolloError({
            graphQLErrors: graphQLErrors,
            networkError: undefined,
            errorMessage: errorMessage,
            extraInfo: extraInfo
          }));
  return {
          extraInfo: errorWithoutNetworkError.extraInfo,
          graphQLErrors: errorWithoutNetworkError.graphQLErrors,
          networkError: networkError,
          name: errorWithoutNetworkError.name,
          message: errorWithoutNetworkError.message,
          stack: errorWithoutNetworkError.stack
        };
}

var Graphql;

var GraphQLError;

var ServerError;

var ServerParseError;

var Types;

exports.Graphql = Graphql;
exports.GraphQLError = GraphQLError;
exports.ServerError = ServerError;
exports.ServerParseError = ServerParseError;
exports.Types = Types;
exports.ensureError = ensureError;
exports.Js_ = Js_;
exports.fromJs = fromJs;
exports.make = make;
/* @apollo/client Not a pure module */

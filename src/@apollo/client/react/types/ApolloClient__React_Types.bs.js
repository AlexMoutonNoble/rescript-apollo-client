// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var ApolloClient__Utils = require("../../../../ApolloClient__Utils.bs.js");
var ApolloClient__Core_Types = require("../../core/ApolloClient__Core_Types.bs.js");
var ApolloClient__Link_Core_Types = require("../../link/core/ApolloClient__Link_Core_Types.bs.js");
var ApolloClient__Core_NetworkStatus = require("../../core/ApolloClient__Core_NetworkStatus.bs.js");
var ApolloClient__Errors_ApolloError = require("../../errors/ApolloClient__Errors_ApolloError.bs.js");
var ApolloClient__Core_WatchQueryOptions = require("../../core/ApolloClient__Core_WatchQueryOptions.bs.js");

var Js_ = {};

function toJs(t, mapJsVariables, safeParse, serializeVariables) {
  return {
          query: t.query,
          displayName: t.displayName,
          skip: t.skip,
          onCompleted: Belt_Option.map(t.onCompleted, (function (onCompleted, jsData) {
                  return Curry._1(onCompleted, Curry._1(safeParse, jsData));
                })),
          onError: Belt_Option.map(t.onError, (function (onError) {
                  return function (jsApolloError) {
                    return Curry._1(onError, ApolloClient__Errors_ApolloError.fromJs(jsApolloError));
                  };
                })),
          client: t.client,
          context: t.context,
          errorPolicy: Belt_Option.map(t.errorPolicy, ApolloClient__Core_WatchQueryOptions.ErrorPolicy.toJs),
          fetchPolicy: Belt_Option.map(t.fetchPolicy, ApolloClient__Core_WatchQueryOptions.WatchQueryFetchPolicy.toJs),
          nextFetchPolicy: Belt_Option.map(t.nextFetchPolicy, ApolloClient__Core_WatchQueryOptions.WatchQueryFetchPolicy.toJs),
          notifyOnNetworkStatusChange: t.notifyOnNetworkStatusChange,
          partialRefetch: t.partialRefetch,
          pollInterval: t.pollInterval,
          ssr: t.ssr,
          variables: Curry._1(mapJsVariables, Curry._1(serializeVariables, t.variables))
        };
}

var QueryHookOptions = {
  Js_: Js_,
  toJs: toJs
};

function make(prim0, prim1, prim2, prim3, prim4, prim5, prim6, prim7, prim8, prim9, prim10, prim11, prim12, prim13, prim14) {
  var tmp = {};
  if (prim0 !== undefined) {
    tmp.query = Caml_option.valFromOption(prim0);
  }
  if (prim1 !== undefined) {
    tmp.displayName = Caml_option.valFromOption(prim1);
  }
  if (prim2 !== undefined) {
    tmp.onCompleted = Caml_option.valFromOption(prim2);
  }
  if (prim3 !== undefined) {
    tmp.onError = Caml_option.valFromOption(prim3);
  }
  if (prim4 !== undefined) {
    tmp.client = Caml_option.valFromOption(prim4);
  }
  if (prim5 !== undefined) {
    tmp.context = Caml_option.valFromOption(prim5);
  }
  if (prim6 !== undefined) {
    tmp.errorPolicy = Caml_option.valFromOption(prim6);
  }
  if (prim7 !== undefined) {
    tmp.fetchPolicy = Caml_option.valFromOption(prim7);
  }
  if (prim8 !== undefined) {
    tmp.nextFetchPolicy = Caml_option.valFromOption(prim8);
  }
  if (prim9 !== undefined) {
    tmp.notifyOnNetworkStatusChange = Caml_option.valFromOption(prim9);
  }
  if (prim10 !== undefined) {
    tmp.partialRefetch = Caml_option.valFromOption(prim10);
  }
  if (prim11 !== undefined) {
    tmp.pollInterval = Caml_option.valFromOption(prim11);
  }
  if (prim12 !== undefined) {
    tmp.ssr = Caml_option.valFromOption(prim12);
  }
  if (prim13 !== undefined) {
    tmp.variables = Caml_option.valFromOption(prim13);
  }
  return tmp;
}

var Js_$1 = {
  make: make
};

function toJs$1(t, safeParse, serializeVariables) {
  return make(t.query, t.displayName, Belt_Option.map(t.onCompleted, (function (onCompleted, jsData) {
                    return Curry._1(onCompleted, Curry._1(safeParse, jsData));
                  })), Belt_Option.map(t.onError, (function (onError) {
                    return function (jsApolloError) {
                      return Curry._1(onError, ApolloClient__Errors_ApolloError.fromJs(jsApolloError));
                    };
                  })), t.client, t.context, Belt_Option.map(t.errorPolicy, ApolloClient__Core_WatchQueryOptions.ErrorPolicy.toJs), Belt_Option.map(t.fetchPolicy, ApolloClient__Core_WatchQueryOptions.WatchQueryFetchPolicy.toJs), undefined, t.notifyOnNetworkStatusChange, t.partialRefetch, t.pollInterval, t.ssr, Belt_Option.map(t.variables, serializeVariables), undefined);
}

var LazyQueryHookOptions = {
  Js_: Js_$1,
  toJs: toJs$1
};

var Js_$2 = {};

var QueryLazyOptions = {
  Js_: Js_$2
};

var Js_$3 = {};

function fromJs(js, safeParse, serialize, serializeVariables) {
  var match = ApolloClient__Utils.safeParseAndLiftToCommonResultProps(js.data, undefined, Belt_Option.map(js.error, ApolloClient__Errors_ApolloError.fromJs), safeParse);
  var previousData = Belt_Option.map(js.previousData, safeParse);
  var fetchMore = function (context, mapJsVariablesOpt, variables, updateQuery, param) {
    var mapJsVariables = mapJsVariablesOpt !== undefined ? mapJsVariablesOpt : (function (prim) {
          return prim;
        });
    var parseErrorDuringCall = {
      contents: undefined
    };
    var tmp = {};
    var tmp$1 = Belt_Option.map(variables, (function (v) {
            return Curry._1(mapJsVariables, Curry._1(serializeVariables, v));
          }));
    if (tmp$1 !== undefined) {
      tmp.variables = Caml_option.valFromOption(tmp$1);
    }
    if (context !== undefined) {
      tmp.context = Caml_option.valFromOption(context);
    }
    var tmp$2 = Belt_Option.map(updateQuery, (function (updateQuery) {
            return function (previousResult, jsFetchMoreOptions) {
              var match = Curry._1(safeParse, previousResult);
              var match$1 = Belt_Option.map(jsFetchMoreOptions.fetchMoreResult, safeParse);
              if (match.TAG === /* Ok */0) {
                var previousResult$1 = match._0;
                if (match$1 === undefined) {
                  return Curry._1(serialize, Curry._2(updateQuery, previousResult$1, {
                                  fetchMoreResult: undefined,
                                  variables: jsFetchMoreOptions.variables
                                }));
                }
                if (match$1.TAG === /* Ok */0) {
                  return Curry._1(serialize, Curry._2(updateQuery, previousResult$1, {
                                  fetchMoreResult: Caml_option.some(match$1._0),
                                  variables: jsFetchMoreOptions.variables
                                }));
                }
                parseErrorDuringCall.contents = {
                  TAG: /* Error */1,
                  _0: match$1._0
                };
                return previousResult;
              }
              parseErrorDuringCall.contents = {
                TAG: /* Error */1,
                _0: match._0
              };
              return previousResult;
            };
          }));
    if (tmp$2 !== undefined) {
      tmp.updateQuery = Caml_option.valFromOption(tmp$2);
    }
    var __x = js.fetchMore(tmp);
    var __x$1 = __x.then(function (jsApolloQueryResult) {
          var match = parseErrorDuringCall.contents;
          var tmp;
          tmp = match !== undefined && match.TAG !== /* Ok */0 ? ({
                TAG: /* Error */1,
                _0: ApolloClient__Errors_ApolloError.make(undefined, {
                      TAG: /* ParseError */3,
                      _0: match._0
                    }, undefined, undefined, undefined)
              }) : ApolloClient__Core_Types.ApolloQueryResult.toResult(ApolloClient__Core_Types.ApolloQueryResult.fromJs(jsApolloQueryResult, safeParse));
          return Promise.resolve(tmp);
        });
    return __x$1.catch(function (error) {
                return Promise.resolve({
                            TAG: /* Error */1,
                            _0: ApolloClient__Errors_ApolloError.make(undefined, {
                                  TAG: /* FetchFailure */0,
                                  _0: ApolloClient__Utils.ensureError(error)
                                }, undefined, undefined, undefined)
                          });
              });
  };
  var refetch = function (mapJsVariablesOpt, variables, param) {
    var mapJsVariables = mapJsVariablesOpt !== undefined ? mapJsVariablesOpt : (function (prim) {
          return prim;
        });
    var __x = js.refetch(Belt_Option.map(variables, (function (v) {
                return Curry._1(mapJsVariables, Curry._1(serializeVariables, v));
              })));
    var __x$1 = __x.then(function (jsApolloQueryResult) {
          return Promise.resolve(ApolloClient__Core_Types.ApolloQueryResult.toResult(ApolloClient__Core_Types.ApolloQueryResult.fromJs(jsApolloQueryResult, safeParse)));
        });
    return __x$1.catch(function (error) {
                return Promise.resolve({
                            TAG: /* Error */1,
                            _0: ApolloClient__Errors_ApolloError.make(undefined, {
                                  TAG: /* FetchFailure */0,
                                  _0: ApolloClient__Utils.ensureError(error)
                                }, undefined, undefined, undefined)
                          });
              });
  };
  var startPolling = function (pollInterval) {
    js.startPolling(pollInterval);
    
  };
  var stopPolling = function (param) {
    js.stopPolling();
    
  };
  var subscribeToMore = function (Operation, updateQuery, onError, context, variables) {
    var subscriptionSafeParse = function (param) {
      return ApolloClient__Utils.safeParse(Operation.parse, param);
    };
    return js.subscribeToMore(ApolloClient__Core_WatchQueryOptions.SubscribeToMoreOptions.toJs({
                    document: Operation.query,
                    variables: variables,
                    updateQuery: updateQuery,
                    onError: Belt_Option.map(onError, (function (onError, error) {
                            return Curry._1(onError, {
                                        TAG: /* SubscriptionError */1,
                                        _0: error
                                      });
                          })),
                    context: context
                  }, (function (parseError) {
                      if (onError !== undefined) {
                        return Curry._1(onError, {
                                    TAG: /* ParseError */0,
                                    _0: parseError
                                  });
                      }
                      
                    }), safeParse, serialize, subscriptionSafeParse));
  };
  var updateQuery = function (updateQueryFn) {
    js.updateQuery(function (jsPreviousData, options) {
          return Curry._1(serialize, Curry._2(updateQueryFn, Curry._1(safeParse, jsPreviousData), options));
        });
    
  };
  return {
          called: js.called,
          client: js.client,
          data: match[0],
          previousData: previousData,
          error: match[1],
          loading: js.loading,
          networkStatus: ApolloClient__Core_NetworkStatus.NetworkStatus.fromJs(js.networkStatus),
          fetchMore: fetchMore,
          refetch: refetch,
          startPolling: startPolling,
          stopPolling: stopPolling,
          subscribeToMore: subscribeToMore,
          updateQuery: updateQuery
        };
}

var QueryResult = {
  Js_: Js_$3,
  fromJs: fromJs
};

var Js_$4 = {};

function fromJs$1(js) {
  return {
          loading: js.loading,
          networkStatus: ApolloClient__Core_NetworkStatus.NetworkStatus.fromJs(js.networkStatus),
          called: js.called
        };
}

var UnexecutedLazyResult = {
  Js_: Js_$4,
  fromJs: fromJs$1
};

function unexecutedLazyResult(v) {
  return v;
}

function queryResult(v) {
  return v;
}

function classify(v) {
  if ((function (value) { return "client" in value})(v)) {
    return {
            TAG: /* QueryResult */1,
            _0: v
          };
  } else {
    return {
            TAG: /* UnexecutedLazyResult */0,
            _0: v
          };
  }
}

var Union = {
  unexecutedLazyResult: unexecutedLazyResult,
  queryResult: queryResult,
  classify: classify
};

var Js_$5 = {
  Union: Union
};

function fromJs$2(js, safeParse, serialize, serializeVariables) {
  var v = classify(js);
  if (v.TAG === /* UnexecutedLazyResult */0) {
    return {
            TAG: /* Unexecuted */1,
            _0: fromJs$1(v._0)
          };
  } else {
    return {
            TAG: /* Executed */0,
            _0: fromJs(v._0, safeParse, serialize, serializeVariables)
          };
  }
}

var LazyQueryResult = {
  Js_: Js_$5,
  fromJs: fromJs$2
};

var Js_$6 = {};

function fromJs$3(param, safeParse, serialize, serializeVariables) {
  var jsExecuteQuery = param[0];
  return [
          (function (context, mapJsVariablesOpt, variables) {
              var mapJsVariables = mapJsVariablesOpt !== undefined ? mapJsVariablesOpt : (function (prim) {
                    return prim;
                  });
              return Curry._1(jsExecuteQuery, {
                          variables: Curry._1(mapJsVariables, Curry._1(serializeVariables, variables)),
                          context: context
                        });
            }),
          fromJs$2(param[1], safeParse, serialize, serializeVariables)
        ];
}

var QueryTuple = {
  Js_: Js_$6,
  fromJs: fromJs$3
};

var Js_$7 = {};

function fromJs$4(param, mapJsVariables, safeParse, serialize, serializeVariables, variables) {
  var jsExecuteQuery = param[0];
  return [
          (function (context, param) {
              return Curry._1(jsExecuteQuery, {
                          variables: Curry._1(mapJsVariables, Curry._1(serializeVariables, variables)),
                          context: context
                        });
            }),
          fromJs$2(param[1], safeParse, serialize, serializeVariables)
        ];
}

var QueryTuple__noVariables = {
  Js_: Js_$7,
  fromJs: fromJs$4
};

var Js_$8 = {};

var BaseMutationOptions = {
  Js_: Js_$8
};

function make$1(prim0, prim1, prim2, prim3, prim4, prim5, prim6, prim7, prim8, prim9, prim10, prim11, prim12, prim13) {
  var tmp = {};
  if (prim0 !== undefined) {
    tmp.mutation = Caml_option.valFromOption(prim0);
  }
  if (prim1 !== undefined) {
    tmp.awaitRefetchQueries = Caml_option.valFromOption(prim1);
  }
  if (prim2 !== undefined) {
    tmp.client = Caml_option.valFromOption(prim2);
  }
  if (prim3 !== undefined) {
    tmp.context = Caml_option.valFromOption(prim3);
  }
  if (prim4 !== undefined) {
    tmp.errorPolicy = Caml_option.valFromOption(prim4);
  }
  if (prim5 !== undefined) {
    tmp.fetchPolicy = Caml_option.valFromOption(prim5);
  }
  if (prim6 !== undefined) {
    tmp.ignoreResults = Caml_option.valFromOption(prim6);
  }
  if (prim7 !== undefined) {
    tmp.notifyOnNetworkStatusChange = Caml_option.valFromOption(prim7);
  }
  if (prim8 !== undefined) {
    tmp.onError = Caml_option.valFromOption(prim8);
  }
  if (prim9 !== undefined) {
    tmp.optimisticResponse = Caml_option.valFromOption(prim9);
  }
  if (prim10 !== undefined) {
    tmp.refetchQueries = Caml_option.valFromOption(prim10);
  }
  if (prim11 !== undefined) {
    tmp.update = Caml_option.valFromOption(prim11);
  }
  if (prim12 !== undefined) {
    tmp.variables = Caml_option.valFromOption(prim12);
  }
  return tmp;
}

var Js_$9 = {
  make: make$1
};

function toJs$2(t, mapJsVariables, safeParse, serialize, serializeVariables) {
  var func = ApolloClient__Core_WatchQueryOptions.MutationUpdaterFn.toJs;
  return make$1(t.mutation, t.awaitRefetchQueries, t.client, t.context, Belt_Option.map(t.errorPolicy, ApolloClient__Core_WatchQueryOptions.ErrorPolicy.toJs), Belt_Option.map(t.fetchPolicy, ApolloClient__Core_WatchQueryOptions.FetchPolicy__noCacheExtracted.toJs), t.ignoreResults, t.notifyOnNetworkStatusChange, Belt_Option.map(t.onError, (function (onError) {
                    return function (jsApolloError) {
                      return Curry._1(onError, ApolloClient__Errors_ApolloError.fromJs(jsApolloError));
                    };
                  })), Belt_Option.map(t.optimisticResponse, (function (optimisticResponse, variables) {
                    return Curry._1(serialize, Curry._1(optimisticResponse, variables));
                  })), Belt_Option.map(t.refetchQueries, ApolloClient__Core_WatchQueryOptions.RefetchQueryDescription.toJs), Belt_Option.map(t.update, (function (param) {
                    return Curry._2(func, param, safeParse);
                  })), Belt_Option.map(t.variables, (function (v) {
                    return Curry._1(mapJsVariables, Curry._1(serializeVariables, v));
                  })), undefined);
}

var MutationHookOptions = {
  Js_: Js_$9,
  toJs: toJs$2
};

var Js_$10 = {};

function fromJs$5(js, safeParse) {
  var match = ApolloClient__Utils.safeParseAndLiftToCommonResultProps(Caml_option.nullable_to_opt(js.data), undefined, Belt_Option.map(js.error, ApolloClient__Errors_ApolloError.fromJs), safeParse);
  return {
          data: match[0],
          error: match[1],
          loading: js.loading,
          called: js.called,
          client: js.client
        };
}

var MutationResult = {
  Js_: Js_$10,
  fromJs: fromJs$5
};

var Js_$11 = {};

function toJs$3(t, mapJsVariables, safeParse, serialize, serializeVariables) {
  var func = ApolloClient__Core_WatchQueryOptions.MutationUpdaterFn.toJs;
  return {
          variables: Curry._1(mapJsVariables, Curry._1(serializeVariables, t.variables)),
          optimisticResponse: Belt_Option.map(t.optimisticResponse, (function (optimisticResponse) {
                  return function (variables) {
                    return Curry._1(serialize, Curry._1(optimisticResponse, variables));
                  };
                })),
          refetchQueries: Belt_Option.map(t.refetchQueries, ApolloClient__Core_WatchQueryOptions.RefetchQueryDescription.toJs),
          awaitRefetchQueries: t.awaitRefetchQueries,
          update: Belt_Option.map(t.update, (function (param) {
                  return Curry._2(func, param, safeParse);
                })),
          context: t.context,
          fetchPolicy: Belt_Option.map(t.fetchPolicy, ApolloClient__Core_WatchQueryOptions.WatchQueryFetchPolicy.toJs)
        };
}

var MutationFunctionOptions = {
  Js_: Js_$11,
  toJs: toJs$3
};

var Js_$12 = {};

function fromJs$6(param, safeParse, serialize, serializeVariables) {
  var jsMutationFn = param[0];
  var mutationFn = function (awaitRefetchQueries, context, fetchPolicy, mapJsVariablesOpt, optimisticResponse, refetchQueries, update, variables) {
    var mapJsVariables = mapJsVariablesOpt !== undefined ? mapJsVariablesOpt : (function (prim) {
          return prim;
        });
    var __x = Curry._1(jsMutationFn, toJs$3({
              variables: variables,
              optimisticResponse: optimisticResponse,
              refetchQueries: refetchQueries,
              awaitRefetchQueries: awaitRefetchQueries,
              update: update,
              context: context,
              fetchPolicy: fetchPolicy
            }, mapJsVariables, safeParse, serialize, serializeVariables));
    var __x$1 = __x.then(function (jsFetchResult) {
          return Promise.resolve(ApolloClient__Link_Core_Types.FetchResult.toResult(ApolloClient__Link_Core_Types.FetchResult.fromJs(jsFetchResult, safeParse)));
        });
    return __x$1.catch(function (error) {
                return Promise.resolve({
                            TAG: /* Error */1,
                            _0: ApolloClient__Errors_ApolloError.make(undefined, {
                                  TAG: /* FetchFailure */0,
                                  _0: ApolloClient__Utils.ensureError(error)
                                }, undefined, undefined, undefined)
                          });
              });
  };
  return [
          mutationFn,
          fromJs$5(param[1], safeParse)
        ];
}

var MutationTuple = {
  Js_: Js_$12,
  fromJs: fromJs$6
};

var Js_$13 = {};

function fromJs$7(param, mapJsVariables, safeParse, serialize, serializeVariables, variables) {
  var jsMutationFn = param[0];
  var mutationFn = function (optimisticResponse, refetchQueries, awaitRefetchQueries, update, context, fetchPolicy, param) {
    var __x = Curry._1(jsMutationFn, toJs$3({
              variables: variables,
              optimisticResponse: optimisticResponse,
              refetchQueries: refetchQueries,
              awaitRefetchQueries: awaitRefetchQueries,
              update: update,
              context: context,
              fetchPolicy: fetchPolicy
            }, mapJsVariables, safeParse, serialize, serializeVariables));
    var __x$1 = __x.then(function (jsFetchResult) {
          return Promise.resolve(ApolloClient__Link_Core_Types.FetchResult.toResult(ApolloClient__Link_Core_Types.FetchResult.fromJs(jsFetchResult, safeParse)));
        });
    return __x$1.catch(function (error) {
                return Promise.resolve({
                            TAG: /* Error */1,
                            _0: ApolloClient__Errors_ApolloError.make(undefined, {
                                  TAG: /* FetchFailure */0,
                                  _0: ApolloClient__Utils.ensureError(error)
                                }, undefined, undefined, undefined)
                          });
              });
  };
  return [
          mutationFn,
          fromJs$5(param[1], safeParse)
        ];
}

var MutationTuple__noVariables = {
  Js_: Js_$13,
  fromJs: fromJs$7
};

var Js_$14 = {};

function fromJs$8(js, safeParse) {
  var match = ApolloClient__Utils.safeParseAndLiftToCommonResultProps(js.data, undefined, Belt_Option.map(js.error, ApolloClient__Errors_ApolloError.fromJs), safeParse);
  return {
          loading: js.loading,
          data: match[0],
          error: match[1]
        };
}

var SubscriptionResult = {
  Js_: Js_$14,
  fromJs: fromJs$8
};

var Js_$15 = {};

function fromJs$9(js, safeParse) {
  return {
          client: js.client,
          subscriptionData: fromJs$8(js.subscriptionData, safeParse)
        };
}

var OnSubscriptionDataOptions = {
  Js_: Js_$15,
  fromJs: fromJs$9
};

var Js_$16 = {};

function fromJs$10(js) {
  return {
          variables: js.variables,
          fetchPolicy: js.fetchPolicy,
          shouldResubscribe: js.shouldResubscribe,
          client: js.client,
          skip: js.skip,
          onSubscriptionData: js.onSubscriptionData,
          onSubscriptionComplete: js.onSubscriptionComplete
        };
}

var BaseSubscriptionOptions = {
  Js_: Js_$16,
  fromJs: fromJs$10
};

var Js_$17 = {};

function toJs$4(t, mapJsVariables, safeParse, serializeVariables) {
  return {
          subscription: t.subscription,
          variables: Curry._1(mapJsVariables, Curry._1(serializeVariables, t.variables)),
          fetchPolicy: t.fetchPolicy,
          shouldResubscribe: Belt_Option.map(t.shouldResubscribe, (function (shouldResubscribe) {
                  return function (jsBaseSubscriptionOptions) {
                    return Curry._1(shouldResubscribe, fromJs$10(jsBaseSubscriptionOptions));
                  };
                })),
          client: t.client,
          skip: t.skip,
          onSubscriptionData: Belt_Option.map(t.onSubscriptionData, (function (onSubscriptionData) {
                  return function (jsOnSubscriptionDataOptions) {
                    return Curry._1(onSubscriptionData, fromJs$9(jsOnSubscriptionDataOptions, safeParse));
                  };
                })),
          onSubscriptionComplete: t.onSubscriptionComplete
        };
}

var SubscriptionHookOptions = {
  Js_: Js_$17,
  toJs: toJs$4
};

var ApolloClient;

var ApolloError;

var ApolloQueryResult;

var ErrorPolicy;

var FetchPolicy;

var FetchPolicy__noCacheExtracted;

var FetchResult;

var Graphql;

var MutationUpdaterFn;

var NetworkStatus;

var RefetchQueryDescription;

var SubscribeToMoreOptions;

var Types;

var UpdateQueryFn;

var Utils;

var WatchQueryFetchPolicy;

exports.ApolloClient = ApolloClient;
exports.ApolloError = ApolloError;
exports.ApolloQueryResult = ApolloQueryResult;
exports.ErrorPolicy = ErrorPolicy;
exports.FetchPolicy = FetchPolicy;
exports.FetchPolicy__noCacheExtracted = FetchPolicy__noCacheExtracted;
exports.FetchResult = FetchResult;
exports.Graphql = Graphql;
exports.MutationUpdaterFn = MutationUpdaterFn;
exports.NetworkStatus = NetworkStatus;
exports.RefetchQueryDescription = RefetchQueryDescription;
exports.SubscribeToMoreOptions = SubscribeToMoreOptions;
exports.Types = Types;
exports.UpdateQueryFn = UpdateQueryFn;
exports.Utils = Utils;
exports.WatchQueryFetchPolicy = WatchQueryFetchPolicy;
exports.QueryHookOptions = QueryHookOptions;
exports.LazyQueryHookOptions = LazyQueryHookOptions;
exports.QueryLazyOptions = QueryLazyOptions;
exports.QueryResult = QueryResult;
exports.UnexecutedLazyResult = UnexecutedLazyResult;
exports.LazyQueryResult = LazyQueryResult;
exports.QueryTuple = QueryTuple;
exports.QueryTuple__noVariables = QueryTuple__noVariables;
exports.BaseMutationOptions = BaseMutationOptions;
exports.MutationHookOptions = MutationHookOptions;
exports.MutationResult = MutationResult;
exports.MutationFunctionOptions = MutationFunctionOptions;
exports.MutationTuple = MutationTuple;
exports.MutationTuple__noVariables = MutationTuple__noVariables;
exports.SubscriptionResult = SubscriptionResult;
exports.OnSubscriptionDataOptions = OnSubscriptionDataOptions;
exports.BaseSubscriptionOptions = BaseSubscriptionOptions;
exports.SubscriptionHookOptions = SubscriptionHookOptions;
/* ApolloClient__Utils Not a pure module */

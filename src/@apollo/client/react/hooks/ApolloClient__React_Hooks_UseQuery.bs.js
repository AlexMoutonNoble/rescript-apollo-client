// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Client = require("@apollo/client");
var ApolloClient__Utils = require("../../../../ApolloClient__Utils.bs.js");
var ApolloClient__React_Types = require("../types/ApolloClient__React_Types.bs.js");
var ApolloClient__React_Hooks_UseLazyQuery = require("./ApolloClient__React_Hooks_UseLazyQuery.bs.js");

var Js_ = {};

function useQuery(Operation, client, context, displayName, errorPolicy, fetchPolicy, nextFetchPolicy, $staropt$star, notifyOnNetworkStatusChange, onCompleted, onError, partialRefetch, pollInterval, skip, ssr, variables) {
  var mapJsVariables = $staropt$star !== undefined ? $staropt$star : (function (prim) {
        return prim;
      });
  var safeParse = function (param) {
    return ApolloClient__Utils.safeParse(Operation.parse, param);
  };
  var jsQueryResult = Client.useQuery(Operation.query, ApolloClient__React_Types.QueryHookOptions.toJs({
            query: undefined,
            displayName: displayName,
            skip: skip,
            onCompleted: onCompleted,
            onError: onError,
            client: client,
            context: context,
            errorPolicy: errorPolicy,
            fetchPolicy: fetchPolicy,
            nextFetchPolicy: nextFetchPolicy,
            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
            partialRefetch: partialRefetch,
            pollInterval: pollInterval,
            ssr: ssr,
            variables: variables
          }, mapJsVariables, safeParse, Operation.serializeVariables));
  return ApolloClient__Utils.useGuaranteedMemo1((function (param) {
                return ApolloClient__React_Types.QueryResult.fromJs(jsQueryResult, safeParse, Operation.serialize, Operation.serializeVariables);
              }), jsQueryResult);
}

function Extend(M) {
  var refetchQueryDescription = function (context, mapJsVariablesOpt, variables) {
    var mapJsVariables = mapJsVariablesOpt !== undefined ? mapJsVariablesOpt : (function (prim) {
          return prim;
        });
    var jsVariables = Curry._1(mapJsVariables, Curry._1(M.serializeVariables, variables));
    return {
            TAG: /* PureQueryOptions */0,
            _0: {
              query: M.query,
              variables: jsVariables,
              context: context
            }
          };
  };
  var use = function (client, context, displayName, errorPolicy, fetchPolicy, mapJsVariables, notifyOnNetworkStatusChange, onCompleted, onError, partialRefetch, pollInterval, skip, ssr, variables) {
    return useQuery(M, client, context, displayName, errorPolicy, fetchPolicy, undefined, mapJsVariables, notifyOnNetworkStatusChange, onCompleted, onError, partialRefetch, pollInterval, skip, ssr, variables);
  };
  var useLazy = function (client, context, displayName, errorPolicy, fetchPolicy, notifyOnNetworkStatusChange, onCompleted, onError, partialRefetch, pollInterval, ssr, param) {
    return ApolloClient__React_Hooks_UseLazyQuery.useLazyQuery(M, client, context, displayName, errorPolicy, fetchPolicy, undefined, notifyOnNetworkStatusChange, onCompleted, onError, partialRefetch, pollInterval, ssr, undefined);
  };
  var useLazyWithVariables = function (client, context, displayName, errorPolicy, fetchPolicy, mapJsVariables, notifyOnNetworkStatusChange, onCompleted, onError, partialRefetch, pollInterval, ssr, variables) {
    return ApolloClient__React_Hooks_UseLazyQuery.useLazyQueryWithVariables(M, client, context, displayName, errorPolicy, fetchPolicy, undefined, mapJsVariables, notifyOnNetworkStatusChange, onCompleted, onError, partialRefetch, pollInterval, ssr, variables);
  };
  return {
          refetchQueryDescription: refetchQueryDescription,
          use: use,
          useLazy: useLazy,
          useLazyWithVariables: useLazyWithVariables
        };
}

var ApolloClient;

var ApolloError;

var ErrorPolicy;

var Graphql;

var QueryHookOptions;

var QueryResult;

var RefetchQueryDescription;

var Types;

var Utils;

var WatchQueryFetchPolicy;

exports.ApolloClient = ApolloClient;
exports.ApolloError = ApolloError;
exports.ErrorPolicy = ErrorPolicy;
exports.Graphql = Graphql;
exports.QueryHookOptions = QueryHookOptions;
exports.QueryResult = QueryResult;
exports.RefetchQueryDescription = RefetchQueryDescription;
exports.Types = Types;
exports.Utils = Utils;
exports.WatchQueryFetchPolicy = WatchQueryFetchPolicy;
exports.Js_ = Js_;
exports.useQuery = useQuery;
exports.Extend = Extend;
/* @apollo/client Not a pure module */

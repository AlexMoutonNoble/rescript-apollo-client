// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("rescript/lib/js/caml_option.js");
var Client = require("@apollo/client");
var ApolloClient__Utils = require("../../../../ApolloClient__Utils.bs.js");
var ApolloClient__React_Types = require("../types/ApolloClient__React_Types.bs.js");

var Js_ = {};

function useMutation(Operation, awaitRefetchQueries, context, client, errorPolicy, fetchPolicy, ignoreResults, notifyOnNetworkStatusChange, onError, onCompleted, optimisticResponse, refetchQueries, update, param) {
  var safeParse = function (param) {
    return ApolloClient__Utils.safeParse(Operation.parse, param);
  };
  var jsMutationTuple = Client.useMutation(Operation.query, ApolloClient__React_Types.MutationHookOptions.toJs({
            mutation: undefined,
            awaitRefetchQueries: awaitRefetchQueries,
            context: context,
            client: client,
            errorPolicy: errorPolicy,
            fetchPolicy: fetchPolicy,
            ignoreResults: ignoreResults,
            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
            onError: onError,
            onCompleted: onCompleted,
            optimisticResponse: optimisticResponse,
            refetchQueries: refetchQueries,
            update: update,
            variables: undefined
          }, (function (prim) {
              return prim;
            }), safeParse, Operation.serialize, Operation.serializeVariables));
  return ApolloClient__Utils.useGuaranteedMemo1((function (param) {
                return ApolloClient__React_Types.MutationTuple.fromJs(jsMutationTuple, safeParse, Operation.serialize, Operation.serializeVariables);
              }), jsMutationTuple);
}

function useMutationWithVariables(Operation, awaitRefetchQueries, context, client, errorPolicy, fetchPolicy, ignoreResults, $staropt$star, notifyOnNetworkStatusChange, onError, onCompleted, optimisticResponse, refetchQueries, update, variables) {
  var mapJsVariables = $staropt$star !== undefined ? $staropt$star : (function (prim) {
        return prim;
      });
  var safeParse = function (param) {
    return ApolloClient__Utils.safeParse(Operation.parse, param);
  };
  var jsMutationTuple = Client.useMutation(Operation.query, ApolloClient__React_Types.MutationHookOptions.toJs({
            mutation: undefined,
            awaitRefetchQueries: awaitRefetchQueries,
            context: context,
            client: client,
            errorPolicy: errorPolicy,
            fetchPolicy: fetchPolicy,
            ignoreResults: ignoreResults,
            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
            onError: onError,
            onCompleted: onCompleted,
            optimisticResponse: optimisticResponse,
            refetchQueries: refetchQueries,
            update: update,
            variables: Caml_option.some(variables)
          }, mapJsVariables, safeParse, Operation.serialize, Operation.serializeVariables));
  return ApolloClient__Utils.useGuaranteedMemo1((function (param) {
                var match = ApolloClient__React_Types.MutationTuple__noVariables.fromJs(jsMutationTuple, mapJsVariables, safeParse, Operation.serialize, Operation.serializeVariables, variables);
                return [
                        match[0],
                        match[1]
                      ];
              }), jsMutationTuple);
}

function Extend(M) {
  var use = function (awaitRefetchQueries, context, client, errorPolicy, fetchPolicy, ignoreResults, notifyOnNetworkStatusChange, onError, onCompleted, optimisticResponse, refetchQueries, update, param) {
    return useMutation(M, awaitRefetchQueries, context, client, errorPolicy, fetchPolicy, ignoreResults, notifyOnNetworkStatusChange, onError, onCompleted, optimisticResponse, refetchQueries, update, undefined);
  };
  var useWithVariables = function (awaitRefetchQueries, context, client, errorPolicy, fetchPolicy, ignoreResults, mapJsVariables, notifyOnNetworkStatusChange, onError, onCompleted, optimisticResponse, refetchQueries, update, variables) {
    return useMutationWithVariables(M, awaitRefetchQueries, context, client, errorPolicy, fetchPolicy, ignoreResults, mapJsVariables, notifyOnNetworkStatusChange, onError, onCompleted, optimisticResponse, refetchQueries, update, variables);
  };
  return {
          use: use,
          useWithVariables: useWithVariables
        };
}

var ApolloClient;

var ApolloError;

var ErrorPolicy;

var FetchPolicy__noCacheExtracted;

var Graphql;

var MutationHookOptions;

var MutationTuple;

var MutationTuple__noVariables;

var MutationUpdaterFn;

var OperationVariables;

var RefetchQueryDescription;

var Types;

var Utils;

exports.ApolloClient = ApolloClient;
exports.ApolloError = ApolloError;
exports.ErrorPolicy = ErrorPolicy;
exports.FetchPolicy__noCacheExtracted = FetchPolicy__noCacheExtracted;
exports.Graphql = Graphql;
exports.MutationHookOptions = MutationHookOptions;
exports.MutationTuple = MutationTuple;
exports.MutationTuple__noVariables = MutationTuple__noVariables;
exports.MutationUpdaterFn = MutationUpdaterFn;
exports.OperationVariables = OperationVariables;
exports.RefetchQueryDescription = RefetchQueryDescription;
exports.Types = Types;
exports.Utils = Utils;
exports.Js_ = Js_;
exports.useMutation = useMutation;
exports.useMutationWithVariables = useMutationWithVariables;
exports.Extend = Extend;
/* @apollo/client Not a pure module */

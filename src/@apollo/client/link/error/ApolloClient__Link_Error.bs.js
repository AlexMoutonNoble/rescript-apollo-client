// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var $$Error = require("@apollo/client/link/error");
var ApolloClient__Link_Core_Types = require("../core/ApolloClient__Link_Core_Types.bs.js");

function error(v) {
  return v;
}

function serverError(v) {
  return v;
}

function serverParseError(v) {
  return v;
}

function classify(v) {
  if ((function (v) { return "bodyText" in v && "response" in v && "statusCode" in v})(v)) {
    return {
            TAG: /* ServerError */1,
            _0: v
          };
  } else if ((function (v) { return "result" in v && "response" in v && "statusCode" in v})(v)) {
    return {
            TAG: /* ServerParseError */2,
            _0: v
          };
  } else {
    return {
            TAG: /* Error */0,
            _0: v
          };
  }
}

var NetworkErrorUnion = {
  error: error,
  serverError: serverError,
  serverParseError: serverParseError,
  classify: classify
};

var Js_ = {
  NetworkErrorUnion: NetworkErrorUnion
};

function fromJs(js) {
  return {
          graphQLErrors: js.graphQLErrors,
          networkError: Belt_Option.map(js.networkError, (function (networkError) {
                  var error = classify(networkError);
                  switch (error.TAG | 0) {
                    case /* Error */0 :
                        return {
                                TAG: /* FetchFailure */0,
                                _0: error._0
                              };
                    case /* ServerError */1 :
                        var error$1 = error._0;
                        return {
                                TAG: /* BadStatus */1,
                                _0: error$1.statusCode,
                                _1: error$1
                              };
                    case /* ServerParseError */2 :
                        return {
                                TAG: /* BadBody */2,
                                _0: error._0
                              };
                    
                  }
                })),
          response: js.response,
          operation: ApolloClient__Link_Core_Types.Operation.fromJs(js.operation),
          forward: (function (operation) {
              return js.forward(operation);
            })
        };
}

var ErrorResponse = {
  Js_: Js_,
  fromJs: fromJs
};

var Js_$1 = {};

var ErrorHandler = {
  Js_: Js_$1
};

var Js_$2 = {};

function onError(errorCb) {
  return $$Error.onError(function (jsErrorResponse) {
              return Curry._1(errorCb, fromJs(jsErrorResponse));
            });
}

var ErrorLink = {
  make: onError
};

var ApolloLink;

var ApolloError;

var GraphQLError;

var ExecutionResult;

var FetchResult;

var NextLink;

var Observable;

var Operation;

var ServerError;

var ServerParseError;

exports.ApolloLink = ApolloLink;
exports.ApolloError = ApolloError;
exports.GraphQLError = GraphQLError;
exports.ExecutionResult = ExecutionResult;
exports.FetchResult = FetchResult;
exports.NextLink = NextLink;
exports.Observable = Observable;
exports.Operation = Operation;
exports.ServerError = ServerError;
exports.ServerParseError = ServerParseError;
exports.ErrorResponse = ErrorResponse;
exports.ErrorHandler = ErrorHandler;
exports.Js_ = Js_$2;
exports.onError = onError;
exports.ErrorLink = ErrorLink;
/* @apollo/client/link/error Not a pure module */

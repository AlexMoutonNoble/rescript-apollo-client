// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Js_null = require("rescript/lib/js/js_null.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var ApolloClient__Utils = require("../../../../ApolloClient__Utils.bs.js");
var ApolloClient__Errors_ApolloError = require("../../errors/ApolloClient__Errors_ApolloError.bs.js");

var Js_ = {};

var GraphQLRequest = {
  Js_: Js_
};

var Js_$1 = {};

var preserveJsPropsAndContext = (function (js, t) {
        return Object.assign(js, t)
      });

function fromJs(js) {
  return preserveJsPropsAndContext(js, {
              query: js.query,
              variables: js.variables,
              operationName: js.operationName,
              extensions: js.extensions,
              rescript_setContext: (function (context) {
                  return js.setContext(context);
                }),
              rescript_getContext: (function (param) {
                  return js.getContext();
                })
            });
}

var Operation = {
  Js_: Js_$1,
  preserveJsPropsAndContext: preserveJsPropsAndContext,
  fromJs: fromJs
};

var Js_$2 = {};

function fromJs$1(js, safeParse) {
  var match = ApolloClient__Utils.safeParseAndLiftToCommonResultProps(Caml_option.nullable_to_opt(js.data), js.errors, undefined, safeParse);
  return {
          data: match[0],
          extensions: js.extensions,
          context: js.context,
          error: match[1]
        };
}

function fromError(error) {
  return {
          data: undefined,
          extensions: undefined,
          context: undefined,
          error: error
        };
}

function toResult(fetchResult) {
  var data = fetchResult.data;
  if (data !== undefined) {
    return {
            TAG: /* Ok */0,
            _0: {
              data: Caml_option.valFromOption(data),
              error: fetchResult.error,
              extensions: fetchResult.extensions,
              context: fetchResult.context
            }
          };
  } else if (fetchResult.error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: fetchResult.error
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: ApolloClient__Errors_ApolloError.make(undefined, undefined, "No data and no error on FetchResult.t. Shouldn't this be impossible?", undefined, undefined)
          };
  }
}

var FetchResult = {
  Js_: Js_$2,
  fromJs: fromJs$1,
  fromError: fromError,
  toResult: toResult
};

var Js_$3 = {};

var NextLink = {
  Js_: Js_$3
};

var Js_$4 = {};

function toJs(t) {
  return function (operation, forward) {
    return Js_null.fromOption(Curry._2(t, operation, forward));
  };
}

var RequestHandler = {
  Js_: Js_$4,
  toJs: toJs
};

var ApolloError;

var Graphql;

var GraphQLError;

var Observable;

var Types;

var Utils;

exports.ApolloError = ApolloError;
exports.Graphql = Graphql;
exports.GraphQLError = GraphQLError;
exports.Observable = Observable;
exports.Types = Types;
exports.Utils = Utils;
exports.GraphQLRequest = GraphQLRequest;
exports.Operation = Operation;
exports.FetchResult = FetchResult;
exports.NextLink = NextLink;
exports.RequestHandler = RequestHandler;
/* ApolloClient__Utils Not a pure module */

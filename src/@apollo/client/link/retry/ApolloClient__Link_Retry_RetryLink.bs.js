// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Retry = require("@apollo/client/link/retry");
var ApolloClient__Link_Retry_DelayFunction = require("./ApolloClient__Link_Retry_DelayFunction.bs.js");
var ApolloClient__Link_Retry_RetryFunction = require("./ApolloClient__Link_Retry_RetryFunction.bs.js");

function delayFunctionOptions(v) {
  return v;
}

function delayFunction(v) {
  return v;
}

var T_delayUnion = {
  delayFunctionOptions: delayFunctionOptions,
  delayFunction: delayFunction
};

function retryFunctionOptions(v) {
  return v;
}

function retryFunction(v) {
  return v;
}

var T_attemptsUnion = {
  retryFunctionOptions: retryFunctionOptions,
  retryFunction: retryFunction
};

var Js_ = {
  T_delayUnion: T_delayUnion,
  T_attemptsUnion: T_attemptsUnion
};

function toJs(t) {
  return {
          delay: Belt_Option.map(t.delay, (function (delay) {
                  if (delay.TAG === /* DelayFunctionOptions */0) {
                    return delay._0;
                  }
                  var partial_arg = delay._0;
                  return function (param, param$1, param$2) {
                    return ApolloClient__Link_Retry_DelayFunction.DelayFunction.toJs(partial_arg, param, param$1, param$2);
                  };
                })),
          attempts: Belt_Option.map(t.attempts, (function (attempts) {
                  if (attempts.TAG === /* RetryFunctionOptions */0) {
                    return ApolloClient__Link_Retry_RetryFunction.RetryFunctionOptions.toJs(attempts._0);
                  }
                  var partial_arg = attempts._0;
                  return function (param, param$1, param$2) {
                    return ApolloClient__Link_Retry_RetryFunction.RetryFunction.toJs(partial_arg, param, param$1, param$2);
                  };
                }))
        };
}

var Options = {
  Js_: Js_,
  toJs: toJs
};

var Js_$1 = {};

function make(attempts, delay, param) {
  return new Retry.RetryLink(toJs({
                  delay: delay,
                  attempts: attempts
                }));
}

var ApolloLink;

var DelayFunctionOptions;

var DelayFunction;

var RetryFunctionOptions;

var RetryFunction;

exports.ApolloLink = ApolloLink;
exports.DelayFunctionOptions = DelayFunctionOptions;
exports.DelayFunction = DelayFunction;
exports.RetryFunctionOptions = RetryFunctionOptions;
exports.RetryFunction = RetryFunction;
exports.Options = Options;
exports.Js_ = Js_$1;
exports.make = make;
/* @apollo/client/link/retry Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var ApolloClient__Utils = require("../../../ApolloClient__Utils.bs.js");
var ApolloClient__Link_Core_Types = require("../link/core/ApolloClient__Link_Core_Types.bs.js");
var ApolloClient__Core_NetworkStatus = require("./ApolloClient__Core_NetworkStatus.bs.js");
var ApolloClient__Errors_ApolloError = require("../errors/ApolloClient__Errors_ApolloError.bs.js");

var Js_ = {};

var OperationVariables = {
  Js_: Js_
};

var Js_$1 = {};

function toJs(t) {
  return {
          query: t.query,
          variables: t.variables,
          context: t.context
        };
}

var PureQueryOptions = {
  Js_: Js_$1,
  toJs: toJs
};

var Js_$2 = {};

function fromJs(js, safeParse) {
  var match = ApolloClient__Utils.safeParseAndLiftToCommonResultProps(js.data, js.errors, undefined, safeParse);
  return {
          data: match[0],
          error: match[1],
          loading: js.loading,
          networkStatus: ApolloClient__Core_NetworkStatus.NetworkStatus.fromJs(js.networkStatus)
        };
}

function fromError(error) {
  return {
          data: undefined,
          error: error,
          loading: false,
          networkStatus: /* Error */6
        };
}

function toResult(apolloQueryResult) {
  var data = apolloQueryResult.data;
  if (data !== undefined) {
    return {
            TAG: /* Ok */0,
            _0: {
              data: Caml_option.valFromOption(data),
              error: apolloQueryResult.error,
              loading: apolloQueryResult.loading,
              networkStatus: apolloQueryResult.networkStatus
            }
          };
  } else if (apolloQueryResult.error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: apolloQueryResult.error
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: ApolloClient__Errors_ApolloError.make(undefined, undefined, "No data and no error on ApolloQueryResult.t. Shouldn't this be impossible?", undefined, undefined)
          };
  }
}

var ApolloQueryResult = {
  Js_: Js_$2,
  fromJs: fromJs,
  fromError: fromError,
  toResult: toResult
};

var Js_$3 = {};

function toJs$1(t, safeParse) {
  return function (previousResult, jsOptions) {
    return Curry._2(t, previousResult, {
                mutationResult: ApolloClient__Link_Core_Types.FetchResult.fromJs(jsOptions.mutationResult, safeParse),
                queryName: jsOptions.queryName,
                queryVariables: jsOptions.queryVariables
              });
  };
}

var MutationQueryReducer = {
  Js_: Js_$3,
  toJs: toJs$1
};

var Js_$4 = {};

function toJs$2(t, safeParse) {
  return Js_dict.map((function (mutationQueryReducer) {
                return toJs$1(mutationQueryReducer, safeParse);
              }), t);
}

var MutationQueryReducersMap = {
  Js_: Js_$4,
  toJs: toJs$2
};

var Js_$5 = {};

var Resolvers = {
  Js_: Js_$5
};

var ApolloError;

var Graphql;

var FetchResult;

var NetworkStatus;

var Resolver;

var Types;

var Utils;

exports.ApolloError = ApolloError;
exports.Graphql = Graphql;
exports.FetchResult = FetchResult;
exports.NetworkStatus = NetworkStatus;
exports.Resolver = Resolver;
exports.Types = Types;
exports.Utils = Utils;
exports.OperationVariables = OperationVariables;
exports.PureQueryOptions = PureQueryOptions;
exports.ApolloQueryResult = ApolloQueryResult;
exports.MutationQueryReducer = MutationQueryReducer;
exports.MutationQueryReducersMap = MutationQueryReducersMap;
exports.Resolvers = Resolvers;
/* ApolloClient__Utils Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Client = require("@apollo/client");
var ApolloClient__Utils = require("../../../ApolloClient__Utils.bs.js");
var ApolloClient__Core_Types = require("./ApolloClient__Core_Types.bs.js");
var ApolloClient__ZenObservable = require("../../../zen-observable/ApolloClient__ZenObservable.bs.js");
var ApolloClient__Link_Core_Types = require("../link/core/ApolloClient__Link_Core_Types.bs.js");
var ApolloClient__Errors_ApolloError = require("../errors/ApolloClient__Errors_ApolloError.bs.js");
var ApolloClient__Core_ObservableQuery = require("./ApolloClient__Core_ObservableQuery.bs.js");
var ApolloClient__Core_WatchQueryOptions = require("./ApolloClient__Core_WatchQueryOptions.bs.js");
var ApolloClient__Cache_Core_Types_DataProxy = require("../cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.bs.js");

var Js_ = {};

function toJs(t) {
  return {
          fetchPolicy: Belt_Option.map(t.fetchPolicy, ApolloClient__Core_WatchQueryOptions.WatchQueryFetchPolicy.toJs),
          errorPolicy: Belt_Option.map(t.errorPolicy, ApolloClient__Core_WatchQueryOptions.ErrorPolicy.toJs),
          context: t.context
        };
}

function make(fetchPolicy, errorPolicy, context, param) {
  return {
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          context: context
        };
}

var DefaultWatchQueryOptions = {
  Js_: Js_,
  toJs: toJs,
  make: make
};

var Js_$1 = {};

function toJs$1(t) {
  return {
          fetchPolicy: Belt_Option.map(t.fetchPolicy, ApolloClient__Core_WatchQueryOptions.FetchPolicy.toJs),
          errorPolicy: Belt_Option.map(t.errorPolicy, ApolloClient__Core_WatchQueryOptions.ErrorPolicy.toJs),
          context: t.context
        };
}

function make$1(fetchPolicy, errorPolicy, context, param) {
  return {
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          context: context
        };
}

var DefaultQueryOptions = {
  Js_: Js_$1,
  toJs: toJs$1,
  make: make$1
};

var Js_$2 = {};

function toJs$2(t) {
  return {
          context: t.context,
          fetchPolicy: Belt_Option.map(t.fetchPolicy, ApolloClient__Core_WatchQueryOptions.FetchPolicy__noCacheExtracted.toJs),
          awaitRefetchQueries: t.awaitRefetchQueries,
          errorPolicy: Belt_Option.map(t.errorPolicy, ApolloClient__Core_WatchQueryOptions.ErrorPolicy.toJs),
          refetchQueries: Belt_Option.map(t.refetchQueries, ApolloClient__Core_WatchQueryOptions.RefetchQueryDescription.toJs)
        };
}

function make$2(context, fetchPolicy, awaitRefetchQueries, errorPolicy, refetchQueries, param) {
  return {
          context: context,
          fetchPolicy: fetchPolicy,
          awaitRefetchQueries: awaitRefetchQueries,
          errorPolicy: errorPolicy,
          refetchQueries: refetchQueries
        };
}

var DefaultMutateOptions = {
  Js_: Js_$2,
  toJs: toJs$2,
  make: make$2
};

var Js_$3 = {};

function toJs$3(t) {
  return {
          watchQuery: Belt_Option.map(t.watchQuery, toJs),
          query: Belt_Option.map(t.query, toJs$1),
          mutate: Belt_Option.map(t.mutate, toJs$2)
        };
}

function make$3(mutate, query, watchQuery, param) {
  return {
          watchQuery: watchQuery,
          query: query,
          mutate: mutate
        };
}

var DefaultOptions = {
  Js_: Js_$3,
  toJs: toJs$3,
  make: make$3
};

var Js_$4 = {};

function toJs$4(t) {
  return {
          uri: t.uri,
          credentials: t.credentials,
          headers: t.headers,
          link: t.link,
          cache: t.cache,
          ssrForceFetchDelay: t.ssrForceFetchDelay,
          ssrMode: t.ssrMode,
          connectToDevTools: t.connectToDevTools,
          queryDeduplication: t.queryDeduplication,
          defaultOptions: Belt_Option.map(t.defaultOptions, toJs$3),
          assumeImmutableResults: t.assumeImmutableResults,
          resolvers: t.resolvers,
          typeDefs: t.typeDefs,
          fragmentMatcher: t.fragmentMatcher,
          name: t.name,
          version: t.version
        };
}

var ApolloClientOptions = {
  Js_: Js_$4,
  toJs: toJs$4
};

var Cast = {};

var Js_$5 = {
  Cast: Cast
};

var preserveJsPropsAndContext = (function (js, t) {
      return Object.assign(js, t)
    });

function make$4(uri, credentials, headers, link, cache, ssrForceFetchDelay, ssrMode, connectToDevTools, queryDeduplication, defaultOptions, assumeImmutableResults, resolvers, typeDefs, fragmentMatcher, name, version, param) {
  var jsClient = new Client.ApolloClient(toJs$4({
            uri: uri,
            credentials: credentials,
            headers: headers,
            link: link,
            cache: cache,
            ssrForceFetchDelay: ssrForceFetchDelay,
            ssrMode: ssrMode,
            connectToDevTools: connectToDevTools,
            queryDeduplication: queryDeduplication,
            defaultOptions: defaultOptions,
            assumeImmutableResults: assumeImmutableResults,
            resolvers: resolvers,
            typeDefs: typeDefs,
            fragmentMatcher: fragmentMatcher,
            name: name,
            version: version
          }));
  var clearStore = function (param) {
    var __x = jsClient.clearStore();
    var __x$1 = __x.then(function (value) {
          return Promise.resolve({
                      TAG: /* Ok */0,
                      _0: value
                    });
        });
    return __x$1.catch(function (e) {
                return Promise.resolve({
                            TAG: /* Error */1,
                            _0: ApolloClient__Utils.ensureError(e)
                          });
              });
  };
  var mutate = function (Operation, awaitRefetchQueries, context, errorPolicy, fetchPolicy, $staropt$star, optimisticResponse, refetchQueries, updateQueries, update, variables) {
    var mapJsVariables = $staropt$star !== undefined ? $staropt$star : (function (prim) {
          return prim;
        });
    var safeParse = function (param) {
      return ApolloClient__Utils.safeParse(Operation.parse, param);
    };
    var __x = jsClient.mutate(ApolloClient__Core_WatchQueryOptions.MutationOptions.toJs({
              context: context,
              fetchPolicy: fetchPolicy,
              mutation: Operation.query,
              awaitRefetchQueries: awaitRefetchQueries,
              errorPolicy: errorPolicy,
              optimisticResponse: optimisticResponse,
              refetchQueries: refetchQueries,
              update: update,
              updateQueries: updateQueries,
              variables: variables
            }, mapJsVariables, safeParse, Operation.serialize, Operation.serializeVariables));
    var __x$1 = __x.then(function (jsFetchResult) {
          return Promise.resolve(ApolloClient__Link_Core_Types.FetchResult.toResult(ApolloClient__Link_Core_Types.FetchResult.fromJs(jsFetchResult, safeParse)));
        });
    return __x$1.catch(function (error) {
                return Promise.resolve({
                            TAG: /* Error */1,
                            _0: ApolloClient__Errors_ApolloError.make(undefined, {
                                  TAG: /* FetchFailure */0,
                                  _0: ApolloClient__Utils.ensureError(error)
                                }, undefined, undefined, undefined)
                          });
              });
  };
  var onClearStore = function (cb) {
    return function (param) {
      jsClient.onClearStore(cb);
      
    };
  };
  var onResetStore = function (cb) {
    return function (param) {
      jsClient.onResetStore(cb);
      
    };
  };
  var query = function (Operation, context, errorPolicy, fetchPolicy, $staropt$star, variables) {
    var mapJsVariables = $staropt$star !== undefined ? $staropt$star : (function (prim) {
          return prim;
        });
    var safeParse = function (param) {
      return ApolloClient__Utils.safeParse(Operation.parse, param);
    };
    var __x = jsClient.query(ApolloClient__Core_WatchQueryOptions.QueryOptions.toJs({
              fetchPolicy: fetchPolicy,
              query: Operation.query,
              variables: variables,
              errorPolicy: errorPolicy,
              context: context
            }, mapJsVariables, Operation.serializeVariables));
    var __x$1 = __x.then(function (jsApolloQueryResult) {
          return Promise.resolve(ApolloClient__Core_Types.ApolloQueryResult.toResult(ApolloClient__Core_Types.ApolloQueryResult.fromJs(jsApolloQueryResult, safeParse)));
        });
    return __x$1.catch(function (error) {
                return Promise.resolve({
                            TAG: /* Error */1,
                            _0: ApolloClient__Errors_ApolloError.make(undefined, {
                                  TAG: /* FetchFailure */0,
                                  _0: ApolloClient__Utils.ensureError(error)
                                }, undefined, undefined, undefined)
                          });
              });
  };
  var readFragment = function (Fragment, id, optimistic, fragmentName, param) {
    var safeParse = function (param) {
      return ApolloClient__Utils.safeParse(Fragment.parse, param);
    };
    return Belt_Option.map(Caml_option.nullable_to_opt(jsClient.readFragment({
                        id: id,
                        fragment: Fragment.query,
                        fragmentName: fragmentName
                      }, optimistic !== undefined ? Caml_option.valFromOption(optimistic) : undefined)), safeParse);
  };
  var readQuery = function (Operation, id, $staropt$star, optimistic, variables) {
    var mapJsVariables = $staropt$star !== undefined ? $staropt$star : (function (prim) {
          return prim;
        });
    var safeParse = function (param) {
      return ApolloClient__Utils.safeParse(Operation.parse, param);
    };
    return Belt_Option.map(Caml_option.nullable_to_opt(jsClient.readQuery(ApolloClient__Cache_Core_Types_DataProxy.Query.toJs({
                            query: Operation.query,
                            variables: variables,
                            id: id
                          }, mapJsVariables, Operation.serializeVariables), optimistic)), safeParse);
  };
  var resetStore = function (param) {
    var __x = jsClient.resetStore();
    var __x$1 = __x.then(function (value) {
          return Promise.resolve({
                      TAG: /* Ok */0,
                      _0: (value == null) ? undefined : Caml_option.some(value)
                    });
        });
    return __x$1.catch(function (e) {
                return Promise.resolve({
                            TAG: /* Error */1,
                            _0: ApolloClient__Utils.ensureError(e)
                          });
              });
  };
  var restore = function (serializedState) {
    return jsClient.restore(serializedState);
  };
  var setLink = function (link) {
    jsClient.setLink(link);
    
  };
  var subscribe = function (Operation, context, errorPolicy, fetchPolicy, $staropt$star, variables) {
    var mapJsVariables = $staropt$star !== undefined ? $staropt$star : (function (prim) {
          return prim;
        });
    var safeParse = function (param) {
      return ApolloClient__Utils.safeParse(Operation.parse, param);
    };
    var jsObservable = jsClient.subscribe(ApolloClient__Core_WatchQueryOptions.SubscriptionOptions.toJs({
              query: Operation.query,
              variables: variables,
              fetchPolicy: fetchPolicy,
              errorPolicy: errorPolicy,
              context: context
            }, mapJsVariables, Operation.serializeVariables));
    return {
            subscribe: (function (onNext, onError, onComplete, param) {
                var onNext$p = function (jsFetchResult) {
                  var ok = ApolloClient__Link_Core_Types.FetchResult.toResult(ApolloClient__Link_Core_Types.FetchResult.fromJs(jsFetchResult, safeParse));
                  if (ok.TAG === /* Ok */0) {
                    return Curry._1(onNext, ok._0);
                  } else if (onError !== undefined) {
                    return Curry._1(onError, ok._0);
                  } else {
                    return ;
                  }
                };
                var onError$p = Belt_Option.map(onError, (function (onError) {
                        return function (unknown) {
                          return Curry._1(onError, ApolloClient__Errors_ApolloError.fromJs(ApolloClient__Errors_ApolloError.Js_.ensureApolloError(unknown)));
                        };
                      }));
                var observable = ApolloClient__ZenObservable.Observable.fromJs(jsObservable);
                return Curry._4(observable.subscribe, onNext$p, onError$p, onComplete, undefined);
              })
          };
  };
  var watchQuery = function (Operation, context, errorPolicy, fetchPolicy, $staropt$star, variables) {
    var mapJsVariables = $staropt$star !== undefined ? $staropt$star : (function (prim) {
          return prim;
        });
    var safeParse = function (param) {
      return ApolloClient__Utils.safeParse(Operation.parse, param);
    };
    return ApolloClient__Core_ObservableQuery.ObservableQuery.fromJs(jsClient.watchQuery(ApolloClient__Core_WatchQueryOptions.WatchQueryOptions.toJs({
                        fetchPolicy: fetchPolicy,
                        query: Operation.query,
                        variables: variables,
                        errorPolicy: errorPolicy,
                        context: context
                      }, mapJsVariables, Operation.serializeVariables)), safeParse);
  };
  var writeFragment = function (Fragment, data, broadcast, id, fragmentName, param) {
    jsClient.writeFragment(ApolloClient__Cache_Core_Types_DataProxy.WriteFragmentOptions.toJs({
              data: data,
              broadcast: broadcast,
              id: id,
              fragment: Fragment.query,
              fragmentName: fragmentName
            }, Fragment.serialize));
    
  };
  var writeQuery = function (Operation, broadcast, data, id, $staropt$star, variables) {
    var mapJsVariables = $staropt$star !== undefined ? $staropt$star : (function (prim) {
          return prim;
        });
    jsClient.writeQuery(ApolloClient__Cache_Core_Types_DataProxy.WriteQueryOptions.toJs({
              data: data,
              broadcast: broadcast,
              query: Operation.query,
              variables: variables,
              id: id
            }, mapJsVariables, Operation.serialize, Operation.serializeVariables));
    
  };
  return preserveJsPropsAndContext(jsClient, {
              rescript_clearStore: clearStore,
              rescript_mutate: mutate,
              rescript_onClearStore: onClearStore,
              rescript_onResetStore: onResetStore,
              rescript_query: query,
              rescript_readFragment: readFragment,
              rescript_readQuery: readQuery,
              rescript_resetStore: resetStore,
              rescript_restore: restore,
              rescript_setLink: setLink,
              rescript_subscribe: subscribe,
              rescript_watchQuery: watchQuery,
              rescript_writeFragment: writeFragment,
              rescript_writeQuery: writeQuery
            });
}

var ApolloCache;

var ApolloError;

var ApolloLink;

var ApolloQueryResult;

var DataProxy;

var ErrorPolicy;

var FetchPolicy;

var FetchPolicy__noCacheExtracted;

var FetchResult;

var FragmentMatcher;

var Graphql;

var MutationOptions;

var MutationQueryReducersMap;

var MutationUpdaterFn;

var Observable;

var ObservableQuery;

var QueryOptions;

var PureQueryOptions;

var RefetchQueryDescription;

var Resolvers;

var SubscriptionOptions;

var Types;

var UriFunction;

var Utils;

var WatchQueryFetchPolicy;

var WatchQueryOptions;

exports.ApolloCache = ApolloCache;
exports.ApolloError = ApolloError;
exports.ApolloLink = ApolloLink;
exports.ApolloQueryResult = ApolloQueryResult;
exports.DataProxy = DataProxy;
exports.ErrorPolicy = ErrorPolicy;
exports.FetchPolicy = FetchPolicy;
exports.FetchPolicy__noCacheExtracted = FetchPolicy__noCacheExtracted;
exports.FetchResult = FetchResult;
exports.FragmentMatcher = FragmentMatcher;
exports.Graphql = Graphql;
exports.MutationOptions = MutationOptions;
exports.MutationQueryReducersMap = MutationQueryReducersMap;
exports.MutationUpdaterFn = MutationUpdaterFn;
exports.Observable = Observable;
exports.ObservableQuery = ObservableQuery;
exports.QueryOptions = QueryOptions;
exports.PureQueryOptions = PureQueryOptions;
exports.RefetchQueryDescription = RefetchQueryDescription;
exports.Resolvers = Resolvers;
exports.SubscriptionOptions = SubscriptionOptions;
exports.Types = Types;
exports.UriFunction = UriFunction;
exports.Utils = Utils;
exports.WatchQueryFetchPolicy = WatchQueryFetchPolicy;
exports.WatchQueryOptions = WatchQueryOptions;
exports.DefaultWatchQueryOptions = DefaultWatchQueryOptions;
exports.DefaultQueryOptions = DefaultQueryOptions;
exports.DefaultMutateOptions = DefaultMutateOptions;
exports.DefaultOptions = DefaultOptions;
exports.ApolloClientOptions = ApolloClientOptions;
exports.Js_ = Js_$5;
exports.preserveJsPropsAndContext = preserveJsPropsAndContext;
exports.make = make$4;
/* @apollo/client Not a pure module */

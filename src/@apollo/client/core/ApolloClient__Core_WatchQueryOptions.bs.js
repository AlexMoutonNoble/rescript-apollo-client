// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var ApolloClient__Core_Types = require("./ApolloClient__Core_Types.bs.js");
var ApolloClient__Link_Core_Types = require("../link/core/ApolloClient__Link_Core_Types.bs.js");

var Js_ = {};

function toJs(x) {
  switch (x) {
    case /* None */0 :
        return "none";
    case /* Ignore */1 :
        return "ignore";
    case /* All */2 :
        return "all";
    
  }
}

var ErrorPolicy = {
  Js_: Js_,
  toJs: toJs
};

var Js_$1 = {};

function toJs$1(x) {
  switch (x) {
    case /* CacheFirst */0 :
        return "cache-first";
    case /* CacheOnly */1 :
        return "cache-only";
    case /* NetworkOnly */2 :
        return "network-only";
    case /* NoCache */3 :
        return "no-cache";
    case /* Standby */4 :
        return "standby";
    
  }
}

var FetchPolicy = {
  Js_: Js_$1,
  toJs: toJs$1
};

var Js_$2 = {};

function toJs$2(x) {
  return "no-cache";
}

var FetchPolicy__noCacheExtracted = {
  Js_: Js_$2,
  toJs: toJs$2
};

var Js_$3 = {};

function toJs$3(x) {
  switch (x) {
    case /* CacheAndNetwork */0 :
        return "cache-and-network";
    case /* CacheFirst */1 :
        return "cache-first";
    case /* CacheOnly */2 :
        return "cache-only";
    case /* NetworkOnly */3 :
        return "network-only";
    case /* NoCache */4 :
        return "no-cache";
    case /* Standby */5 :
        return "standby";
    
  }
}

var WatchQueryFetchPolicy = {
  Js_: Js_$3,
  toJs: toJs$3
};

var Js_$4 = {};

function toJs$4(t, mapJsVariables, serializeVariables) {
  return {
          fetchPolicy: Belt_Option.map(t.fetchPolicy, toJs$1),
          query: t.query,
          variables: Curry._1(mapJsVariables, Curry._1(serializeVariables, t.variables)),
          errorPolicy: Belt_Option.map(t.errorPolicy, toJs),
          context: t.context
        };
}

var QueryOptions = {
  Js_: Js_$4,
  toJs: toJs$4
};

var Js_$5 = {};

function toJs$5(t, mapJsVariables, serializeVariables) {
  return {
          fetchPolicy: Belt_Option.map(t.fetchPolicy, toJs$3),
          query: t.query,
          variables: Curry._1(mapJsVariables, Curry._1(serializeVariables, t.variables)),
          errorPolicy: Belt_Option.map(t.errorPolicy, toJs),
          context: t.context
        };
}

var WatchQueryOptions = {
  Js_: Js_$5,
  toJs: toJs$5
};

var Js_$6 = {};

function toJs$6(t, onParseError, querySafeParse, querySerialize, subscriptionSafeParse) {
  return function (jsQueryData, param) {
    var match = Curry._1(querySafeParse, jsQueryData);
    var match$1 = Curry._1(subscriptionSafeParse, param.subscriptionData.data);
    if (match.TAG === /* Ok */0) {
      if (match$1.TAG === /* Ok */0) {
        return Curry._1(querySerialize, Curry._2(t, match._0, {
                        subscriptionData: {
                          data: match$1._0
                        }
                      }));
      }
      Curry._1(onParseError, match$1._0);
      return jsQueryData;
    }
    Curry._1(onParseError, match._0);
    return jsQueryData;
  };
}

var UpdateQueryFn = {
  Js_: Js_$6,
  toJs: toJs$6
};

var Js_$7 = {};

function toJs$7(t, onUpdateQueryParseError, querySafeParse, querySerialize, subscriptionSafeParse) {
  return {
          document: t.document,
          variables: t.variables,
          updateQuery: Belt_Option.map(t.updateQuery, (function (param) {
                  return toJs$6(param, onUpdateQueryParseError, querySafeParse, querySerialize, subscriptionSafeParse);
                })),
          onError: t.onError,
          context: t.context
        };
}

var SubscribeToMoreOptions = {
  Js_: Js_$7,
  toJs: toJs$7
};

var Js_$8 = {};

function toJs$8(t, mapJsVariables, serializeVariables) {
  return {
          query: t.query,
          variables: Curry._1(mapJsVariables, Curry._1(serializeVariables, t.variables)),
          fetchPolicy: Belt_Option.map(t.fetchPolicy, toJs$1),
          errorPolicy: Belt_Option.map(t.errorPolicy, toJs),
          context: t.context
        };
}

var SubscriptionOptions = {
  Js_: Js_$8,
  toJs: toJs$8
};

var Js_$9 = {};

function toJs$9(mutationUpdaterFn, safeParse) {
  return function (cache, jsFetchResult) {
    return Curry._2(mutationUpdaterFn, cache, ApolloClient__Link_Core_Types.FetchResult.fromJs(jsFetchResult, safeParse));
  };
}

var MutationUpdaterFn = {
  Js_: Js_$9,
  toJs: toJs$9
};

function string(v) {
  return v;
}

function pureQueryOptions(v) {
  return v;
}

var Union = {
  string: string,
  pureQueryOptions: pureQueryOptions
};

var Js_$10 = {
  Union: Union
};

function toJs$10(__x) {
  return Belt_Array.map(__x, (function (x) {
                if (x.TAG === /* PureQueryOptions */0) {
                  return ApolloClient__Core_Types.PureQueryOptions.toJs(x._0);
                } else {
                  return x._0;
                }
              }));
}

var RefetchQueryDescription = {
  Js_: Js_$10,
  toJs: toJs$10
};

var Js_$11 = {};

function toJs$11(t, mapJsVariables, safeParse, serialize, serializeVariables) {
  var func = ApolloClient__Core_Types.MutationQueryReducersMap.toJs;
  return {
          mutation: t.mutation,
          context: t.context,
          fetchPolicy: Belt_Option.map(t.fetchPolicy, toJs$2),
          awaitRefetchQueries: t.awaitRefetchQueries,
          errorPolicy: Belt_Option.map(t.errorPolicy, toJs),
          optimisticResponse: Belt_Option.map(t.optimisticResponse, (function (optimisticResponse) {
                  return function (variables) {
                    return Curry._1(serialize, Curry._1(optimisticResponse, variables));
                  };
                })),
          update: Belt_Option.map(t.update, (function (param) {
                  return toJs$9(param, safeParse);
                })),
          updateQueries: Belt_Option.map(t.updateQueries, (function (param) {
                  return Curry._2(func, param, safeParse);
                })),
          refetchQueries: Belt_Option.map(t.refetchQueries, toJs$10),
          variables: Curry._1(mapJsVariables, Curry._1(serializeVariables, t.variables))
        };
}

var MutationOptions = {
  Js_: Js_$11,
  toJs: toJs$11
};

var ApolloCache;

var FetchResult;

var Graphql;

var MutationQueryReducersMap;

var Types;

var PureQueryOptions;

exports.ApolloCache = ApolloCache;
exports.FetchResult = FetchResult;
exports.Graphql = Graphql;
exports.MutationQueryReducersMap = MutationQueryReducersMap;
exports.Types = Types;
exports.PureQueryOptions = PureQueryOptions;
exports.ErrorPolicy = ErrorPolicy;
exports.FetchPolicy = FetchPolicy;
exports.FetchPolicy__noCacheExtracted = FetchPolicy__noCacheExtracted;
exports.WatchQueryFetchPolicy = WatchQueryFetchPolicy;
exports.QueryOptions = QueryOptions;
exports.WatchQueryOptions = WatchQueryOptions;
exports.UpdateQueryFn = UpdateQueryFn;
exports.SubscribeToMoreOptions = SubscribeToMoreOptions;
exports.SubscriptionOptions = SubscriptionOptions;
exports.MutationUpdaterFn = MutationUpdaterFn;
exports.RefetchQueryDescription = RefetchQueryDescription;
exports.MutationOptions = MutationOptions;
/* ApolloClient__Core_Types Not a pure module */

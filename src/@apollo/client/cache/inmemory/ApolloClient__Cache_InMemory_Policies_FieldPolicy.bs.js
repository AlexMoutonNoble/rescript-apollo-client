// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

var Js_ = {};

var FieldMergeFunction = {
  Js_: Js_
};

var Js_$1 = {};

var StorageType = {
  Js_: Js_$1
};

var Js_$2 = {};

function fromJs(js) {
  return {
          args: js.args,
          fieldName: js.fieldName,
          storeFieldName: js.storeFieldName,
          field: js.field,
          variables: js.variables,
          isReference: js.isReference,
          toReference: js.toReference,
          storage: js.storage,
          cache: js.cache,
          readField: js.readField,
          canRead: js.canRead,
          mergeObjects: (function (existing, incoming) {
              return js.canRead(existing, incoming);
            })
        };
}

var FieldFunctionOptions = {
  Js_: Js_$2,
  fromJs: fromJs
};

var Js_$3 = {};

function toJs(t, existing, jsFieldFunctionOptions) {
  return Curry._2(t, existing, fromJs(jsFieldFunctionOptions));
}

var FieldReadFunction = {
  Js_: Js_$3,
  toJs: toJs
};

var Js_$4 = {};

var KeySpecifier = {
  Js_: Js_$4
};

var Js_$5 = {};

var KeyArgsFunction = {
  Js_: Js_$5
};

function keySpecifier(v) {
  return v;
}

function keyArgsFunction(v) {
  return v;
}

var KeyArgsUnion = {
  keySpecifier: keySpecifier,
  keyArgsFunction: keyArgsFunction,
  false_: false
};

var Js_$6 = {
  KeyArgsUnion: KeyArgsUnion
};

function toJs$1(x) {
  if (typeof x === "number") {
    return false;
  } else {
    return x._0;
  }
}

var FieldPolicy_KeyArgs = {
  Js_: Js_$6,
  toJs: toJs$1
};

var Js_$7 = {};

function toJs$2(t) {
  return {
          keyArgs: Belt_Option.map(t.keyArgs, toJs$1),
          read: Belt_Option.map(t.read, toJs),
          merge: t.merge
        };
}

var FieldPolicy = {
  Js_: Js_$7,
  toJs: toJs$2
};

var ApolloCache;

var CanReadFunction;

var FieldNode;

var ReadFieldFunction;

var ToReferenceFunction;

exports.ApolloCache = ApolloCache;
exports.CanReadFunction = CanReadFunction;
exports.FieldNode = FieldNode;
exports.ReadFieldFunction = ReadFieldFunction;
exports.ToReferenceFunction = ToReferenceFunction;
exports.FieldMergeFunction = FieldMergeFunction;
exports.StorageType = StorageType;
exports.FieldFunctionOptions = FieldFunctionOptions;
exports.FieldReadFunction = FieldReadFunction;
exports.KeySpecifier = KeySpecifier;
exports.KeyArgsFunction = KeyArgsFunction;
exports.FieldPolicy_KeyArgs = FieldPolicy_KeyArgs;
exports.FieldPolicy = FieldPolicy;
/* No side effect */

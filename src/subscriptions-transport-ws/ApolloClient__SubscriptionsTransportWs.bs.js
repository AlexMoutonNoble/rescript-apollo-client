// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var SubscriptionsTransportWs = require("subscriptions-transport-ws");

var Js_ = {};

var ConnectionParams = {
  Js_: Js_
};

function connectionParams(v) {
  return v;
}

function fn(v) {
  return v;
}

function promise(v) {
  return v;
}

var Union = {
  connectionParams: connectionParams,
  fn: fn,
  promise: promise
};

var Js_$1 = {
  Union: Union
};

function toJs(x) {
  switch (x.TAG | 0) {
    case /* ConnectionParams */0 :
    case /* Function */1 :
    case /* Promise */2 :
        return x._0;
    
  }
}

var ConnectionParamsOptions = {
  Js_: Js_$1,
  toJs: toJs
};

var Js_$2 = {};

function toJs$1(t) {
  return {
          connectionParams: Belt_Option.map(t.connectionParams, toJs),
          timeout: t.timeout,
          reconnect: t.reconnect,
          reconnectionAttempts: t.reconnectionAttempts,
          connectionCallback: t.connectionCallback,
          lazy: t.lazy,
          inactivityTimeout: t.inactivityTimeout
        };
}

function make(connectionParams, timeout, reconnect, reconnectionAttempts, connectionCallback, lazy_, inactivityTimeout, param) {
  return {
          connectionParams: connectionParams,
          timeout: timeout,
          reconnect: reconnect,
          reconnectionAttempts: reconnectionAttempts,
          connectionCallback: connectionCallback,
          lazy: lazy_,
          inactivityTimeout: inactivityTimeout
        };
}

var ClientOptions = {
  Js_: Js_$2,
  toJs: toJs$1,
  make: make
};

var Js_$3 = {};

var preserveJsPropsAndContext = (function (js, t) {
        return Object.assign(js, t)
      });

function make$1(url, options, webSocketImpl, webSocketProtocols, param) {
  var jsSubscriptionClient = new SubscriptionsTransportWs.SubscriptionClient(url, Caml_option.option_get(Belt_Option.map(options, toJs$1)), webSocketImpl !== undefined ? Caml_option.valFromOption(webSocketImpl) : undefined, webSocketProtocols !== undefined ? Caml_option.valFromOption(webSocketProtocols) : undefined);
  var close = function (isForced, closedByUser, param) {
    jsSubscriptionClient.close(isForced !== undefined ? Caml_option.valFromOption(isForced) : undefined, closedByUser !== undefined ? Caml_option.valFromOption(closedByUser) : undefined);
    
  };
  return preserveJsPropsAndContext(jsSubscriptionClient, {
              rescript_close: close
            });
}

var SubscriptionClient = {
  Js_: Js_$3,
  preserveJsPropsAndContext: preserveJsPropsAndContext,
  make: make$1
};

exports.ConnectionParams = ConnectionParams;
exports.ConnectionParamsOptions = ConnectionParamsOptions;
exports.ClientOptions = ClientOptions;
exports.SubscriptionClient = SubscriptionClient;
/* subscriptions-transport-ws Not a pure module */
